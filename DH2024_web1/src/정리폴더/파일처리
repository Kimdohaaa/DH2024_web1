[파일]*윈도우 기준*
- 컴퓨터가 자료들을 모아놓은 것
- 최소 용량 단위 : 바이트

[스트림]
- 정의 : 컴퓨터 내 데이터 / 자료가 다니는 데이터 통로
- 데이터 : 바이트 단위의 데이터들이 스트림 통로를 통해 데이터를 주고 받음
- 사용자 : 프로그램<->키보드 / 프로그램<->파일 / 프로그램<->네트워크

[바이트]
- 정의 : 컴퓨터가 자료를 저장하는 용량 단위
- 종류
	1) 비트 : 0 / 1
	2) 바이트 : 01010101 (8bit -> 1byte)
	3) bit -> byte -> KB -> MB -> GB -> 등등
	
[자바 파일 입출력]
- 정의 : 자바에서 저장된 메모리(JVM)를 자바 외부 파일(윈도우)에 입출력
	-> 코드파일이 저장된 메모리 != 실행중인 메모리
- 목적 : 실행중인 자바(JVM/메모리(주기억장치)) 데이터를 외부(C드라이브(보조기억장치))에 저장하기 위함
	-> 설계 시 데이터 저장 방법을 고려하여 설계해야 함
	  * 데이터 저장 방법 * : DB vs 파일처리 vs 톰캣세션 vs 브라우저세션 vs 자바싱글톤
- 입출력 클래스(!!!스트림 클래스는 예외처리 필수!!!)
	1. FileOutputStream 클래스 : 출력(*실행 중인* 자바 자료를 윈도우 파일에 출력(쓰기))
		- 형식 : FileOutputStream 변수명 = new FileOutputStream("입력할 파일경로");
		- 메소드
			1) .write(출력할 바이트배열)
	2. FileInputStream 클래스 : 입력(파일의 자료를 자바로 가져오기)
		- 형식 : FileInputStream in = new FileInputStream("불러올 파일경로");
		- 메소드
			1) .read(입력할 바이트 배열)
			
	★ String 클래스 ★
	1. .getBytes() : 문자열 -변환-> 바이트배열
	2. new String(바이트배열) : 바이트배열 -> 문자열  => 생성자

[자바 파일 클래스]
	1. File 클래스 : 파일의 자료를 자바로 가져오기
		- 형식 : File file = new File("경로"); 
		- 메소드
			1) .isFile()  : 지정한 경로의 파일 존재 여부를 boolean 타입으로 반환
			2) .getName() : 지정한 경로의 파일 명 반환
			3) .exists()  : 지정한 경로의 파일 존재 여부를 boolean 타입으로 반환
			4) .length()  : 지정한 경로의 파일 용량을 바이트용량으로 반환
			5) .delete()  : 지정한 경로의 파일 존재 시 삭제(자바에서)
			6) .getPath() : 지정한 경로의 파일의 경로 확인
			7) .mkdir()   : 지정한 경로의 파일 생성
			
[서블릿 파일 클래스]
1. 업로드 라이브러리 종류
	- cos.jar
	- commons

[commons 라이브러리 설치]
	- https://mvnrepository.com/ 
	- commons FileUpload 검색
		-> Apache Commons IO 최신 버전 클릭 -> jar 클릭 -> 다운로드
		-> Apache Commons FileUpload 최신 버전 클릭 -> jar 클릭 -> 다운로드
	- 다운로드 받은 라이브러리 [webapp] -> [WEB-INF] -> [lib] 파일에 넣기 
	- 라이브러리 파일 오르쪽 클릭 -> [build Path] -> [ADD]
	
	★ 톰캣 10.0 이후 버전에서 commons.jar 을 사용하기 위해서는 마이그레이션 필요 ★
	* 마이그레이션 : javax 경로 -변경-> jakarta 데이터 / 소프트웨어를 현행 시스템 환경 -시스템전환-> 새로운 환경 하는 것 *

[마이그레이션]	
1) 아파치 톰캣 페이지 접속
2) 사이드바에 [Tomcat Migration toll for Jakarta EE] -> [shaded jar (pgp, sha512)]
3) 다운로드한 파일 lib 에 넣기 * Build Path 하지 않아도 됨	
4) 해당 파일 오른쪽 클릭 -> [Show In]	 -> [터미널]
5) 터미널에 
	1_java -jar jakartaee-migration-1.0.9-shaded.jar commons-fileupload-1.5.jar commons-fileupload-1.5.jar 
	2_java -jar jakartaee-migration-1.0.9-shaded.jar commons-io-2.18.0.jar commons-io-2.18.0.jar		
	입력(***학원 기준 버전임(jar 버전 확인하기)***)
6) 터미널에 successfully 나오면 성공 

[commons 라이브러리]
1. 클래스
	1) DiskFileItemFactory 클래스
		- 메소드
			-> .setRepository() 	: 저장 위치 설정
			-> .setSizeThreshold()  : 업로드 용량(바이트 단위) 제한 설정 => 1024바이트 == 1KB 
			-> .setDefaultCharset() : 인코딩 설정
	2) ServletFileUpload 클래스
2. 인터페이스
	1) FileItem	인터페이스 : HTTP 요청에서 파일 업로드와 관련된 데이터를 처리
		- 메소드
			-> (boolean) .isFormField(): 해당 항목이 일반 폼 필드인지 파일 필드인지를 확인
			-> (String) .getFieldName(): 필드의 이름을 반환
			-> (String) .getName(): 업로드된 파일의 이름을 반환
			-> (long) .getSize(): 파일의 크기를 반환
			-> (InputStream) .getInputStream(): 파일 데이터에 대한 입력 스트림을 반환
			-> (byte[]) .get(): 파일 데이터를 바이트 배열로 반환
			-> (void) .delete(): 파일 항목이 더 이상 필요하지 않은 경우 메모리에서 삭제
3. 주요 메소드
	1) req.getServletContext().getRealPath("경로") : 서버 내 경로 반환	
	2) .parseRquest(변환할 자료) 
		-> 톰캣 10.1 버전을 지원하지 않기 때문에 cos.jar / commons.jar 사용 시 오류 발생
		★ 해결법 ★
		1_톰캣 버전 9 이하 사용
		2_마이그레이션을 이용하여 라이브러리 버전 다운그레이드  (마이그레이션 방법 : JSP p.237) 		
			* 마이그레이션 : 데이터 / 소프트웨어를 현행 시스템 환경 -시스템전환-> 새로운 환경 하는 것
	3) .isFormField() : 자료가 첨부파일인지 일반 문자열인지 구분		

★ 여러 사람들이 동일하 파일명으로 첨부파일 업로드 시 충돌을 막기 위해 식별자를 통해 첨부파일 저장 ★
해결법
	1) 날짜 / 시간(밀리초) 조합
	2) PK 번호와 조합
	3) UUID(범용 고유 식별자)
		-> 자바 라이브러리
		- .randomUUID() 메소드를 통해 랜덤으로 자동 지정
		예] String uuid = UUID.randomUUID().toString(); 
			// UUID 지정
		   String filename = uuid + fileItem.getName().replaceAll("-", "_");	
			// 하이픈은 UUID 구분용으로 사용해야 하기 때문에 사용자가 입력 시 언더바로 변경하여 저장함
			
			
			