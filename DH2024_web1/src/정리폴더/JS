[JS 함수]
1. 선언적 함수
	- 형식 :	function 함수명 (매개변수) {실행코드;}
2. 익명 함수
	- 형식 : function 함수명 (매개변수) {실행코드;}
	- 상수 / 변수에 저장 가능
3. 람다식 함수 
	- 형식 : (매개면수명) => {실행코드;}
	- 상수 / 변수에 저장 가능
	
[람다식]
1. 활용처
	1) 배열명.forEach(람다식표현)
		- 형식 : [].forEach( (반복변수명) => {실행코드;} )
		- 배열 내 첫번째 요소 ~ 마지막 요소까지 반복변수명에 하나씩 요소를 대입 반복
		- 리턴 불가
		- 주로 배열의 요소 단순 순회 시 사용
	2) let 새로운배열명.map(람다식표현);
		- 형식 : [].map( (반복변수명) => {실행코드;} )
		- 배열 내 첫번째 요소 ~ 마지막 요소까지 반복변수명에 하나씩 요소를 대입 반복
		- 리턴 가능
		- 주로 배열 복사 시 사용(얕은 복사)
	3) fetch().then(람다식표현).then(람다식표현).catch(람다식표현)	
		- 형식 : fetch(HTTP URL, OPTION)
		- 역할 : HTTP 요청(request)을 보내고 응답(response)을 비동기적으로 처리하는 함수
		- 예시 
			fetch(HTTP URL , OPTION)
				1. HTTP URL 
					1) 통신할 서블릿의 URL 주소 
					2) 쿼리스트링
				2. OPTION -> request 에 대한 옵션(HTTP HEADER 정보 설정)
					1) method : HTTP 프로토콜 메소드 선택
						- 'GET'
						- 'POST'
						- 'PUT'
						- 'DELETE'
					2) headers : HTTP 프로토콜 요청 시 데이터 자료 타입을 명시
						- {"Content-Type" : "application/json"}
						- {"Content-Type" : "application/plain"}
						- {"Content-Type" : "multipart/gorm-data"}											
						- {"Content-Type" : "text/html : html"}
						  등 등
					3) body : HTTP 는 문자열 타입만 전송 가능하므로 객체 타입을 문자열 타입으로 변환
						- JSON.stringify(전송할 객체)
		
				3. response 에 대한 설정
					1) .then(응답객체 => 응답데이터의 타입변환 코드);
						- 응답객체.json() : fetch 함수로 받은 HTTP 응답객체 -변환-> JSON형식(application/json) -> 다음 .then() 메소드에게 반환
						- 응답객체.text() : fetch 함수로 받은 HTTP 응답객체 -변환-> 문자형식(text/plain) -> 다음 .then() 메소드에게 반환
					2) .then(변환된응답데이터 => {실행코드;})
					3) .catch(에외변수명 => {예외처리코드;})
						  
						  
						  
						  
						  